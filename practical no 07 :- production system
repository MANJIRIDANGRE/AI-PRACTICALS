class ProductionSystem:
    def __init__(self):
        self.working_memory = {}
        self.rules = []

    def add_rule(self, condition, action):
        self.rules.append((condition, action))

    def apply_rules(self):
        for rule in self.rules:
            condition, action = rule
            if self.check_condition(condition):
                self.perform_action(action)
                break

    def check_condition(self, condition):
        for variable, value in condition.items():
            if self.working_memory.get(variable) != value:
                return False
        return True

    def perform_action(self, action):
        for variable, value in action.items():
            self.working_memory[variable] = value
        print(f"Action performed: {action}")
        
    def get_working_memory(self):
        return self.working_memory

# Example Usage
if __name__ == "__main__":
    production_system = ProductionSystem()

    # Define Rules
    rule1 = ({'temperature': 'high'}, {'cooling': 'on'})
    rule2 = ({'temperature': 'low', 'humidity': 'high'}, {'heating': 'on'})
    rule3 = ({'humidity': 'low'}, {'cooling': 'off'})
    rule4 = ({'heating': 'on'}, {'temperature': 'low'})
    rule5 = ({'cooling': 'on'}, {'temperature': 'high'})

    # Add Rules to the Production System
    production_system.add_rule(*rule1)
    production_system.add_rule(*rule2)
    production_system.add_rule(*rule3)
    production_system.add_rule(*rule4)
    production_system.add_rule(*rule5)

    # Initial Working Memory
    production_system.working_memory = {'temperature': 'high', 'humidity': 'low'}

    print("Initial Working Memory:", production_system.get_working_memory())

    # Apply Rules
    production_system.apply_rules()

    # Updated Working Memory
    print("Updated Working Memory:", production_system.get_working_memory())
