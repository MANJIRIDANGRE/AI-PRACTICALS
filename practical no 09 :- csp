def schedule_courses(courses, constraints):
    def is_valid_schedule(course, time_slot, current_schedule):
        for constraint in constraints:
            if not constraint(course, time_slot, current_schedule):
                return False
        return True

    def backtrack_schedule(current_schedule):
        if len(current_schedule) == len(courses):
            return current_schedule

        course = courses[len(current_schedule)]

        for time_slot in range(11):
            if is_valid_schedule(course, time_slot, current_schedule):
                current_schedule.append((course, time_slot))
                result = backtrack_schedule(current_schedule)
                if result is not None:
                    return result
                current_schedule.pop()

        return None

    return backtrack_schedule([])

# Example usage:

courses = ["CS101", "CS102", "CS201", "CS202"]
constraints = [
    lambda course, time_slot, current_schedule: not any(course == c and time_slot == t for c, t in current_schedule)
]

# Schedule the courses and print the output.
schedule = schedule_courses(courses, constraints)
if schedule is not None:
    print(schedule)
else:
    print("No valid schedule found.")
